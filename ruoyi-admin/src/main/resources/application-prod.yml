# 数据源配置
spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    druid:
      # 主库数据源
      master:
        url: jdbc:mysql://mysql:3306/tron_wallet?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
        username: root
        password: eason
      # 从库数据源
      slave:
        # 从数据源开关/默认关闭
        enabled: false
        url:
        username:
        password:
      # 初始连接数
      initialSize: 5
      # 最小连接池数量
      minIdle: 10
      # 最大连接池数量
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      # 配置一个连接在池中最大生存的时间，单位是毫秒
      maxEvictableIdleTimeMillis: 900000
      # 配置检测连接是否有效
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      webStatFilter:
        enabled: true
      statViewServlet:
        enabled: true
        # 设置白名单，不填则允许所有访问
        allow:
        url-pattern: /druid/*
        # 控制台管理用户名和密码
        login-username: ruoyi
        login-password: 123456
      filter:
        stat:
          enabled: true
          # 慢SQL记录
          log-slow-sql: true
          slow-sql-millis: 1000
          merge-sql: true
        wall:
          config:
            multi-statement-allow: true
  # redis 配置
  redis:
    # 地址
    host: redis
    # 端口，默认为6379
    port: 6379
    # 数据库索引
    database: 0
    # 密码
    password:
    # 连接超时时间
    timeout: 10s
    lettuce:
      pool:
        # 连接池中的最小空闲连接
        min-idle: 0
        # 连接池中的最大空闲连接
        max-idle: 8
        # 连接池的最大数据库连接数
        max-active: 8
        # #连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1ms
spring.rabbitmq.host: rabbitmq
spring.rabbitmq.port: 5672
spring.rabbitmq.username: guest
spring.rabbitmq.password: guest
spring.rabbitmq.virtual-host: /
spring.rabbitmq.publisher-confirm-type: correlated

# 超时订单通知-发送者
spring.cloud.stream.bindings.payTimeOutput.destination: payTimeOutput
spring.cloud.stream.bindings.payTimeOutput.content-type: application/json
spring.cloud.stream.rabbit.bindings.payTimeOutput.producer.delayed-exchange: true

# 超时订单通知-接收者
spring.cloud.stream.bindings.payTimeInput.destination: payTimeOutput
spring.cloud.stream.bindings.payTimeInput.content-type: application/json
spring.cloud.stream.bindings.payTimeInput.group: notify
spring.cloud.stream.bindings.payTimeInput.consumer.concurrency: 1

# 支付回调订单通知-发送者
spring.cloud.stream.bindings.callBackOutput.destination: callBackOutput
spring.cloud.stream.bindings.callBackOutput.content-type: application/json
spring.cloud.stream.rabbit.bindings.callBackOutput.producer.delayed-exchange: true

# 支付回调订单通知-接收者
spring.cloud.stream.bindings.callBackInput.destination: callBackOutput
spring.cloud.stream.bindings.callBackInput.content-type: application/json
spring.cloud.stream.bindings.callBackInput.group: callback
spring.cloud.stream.bindings.callBackInput.consumer.concurrency: 1

# 代付订单通知-发送者
spring.cloud.stream.bindings.pdaiOutput.destination: pdaiOutput
spring.cloud.stream.bindings.pdaiOutput.content-type: application/json
spring.cloud.stream.rabbit.bindings.pdaiOutput.producer.delayed-exchange: true

# 代付订单通知-接收者
spring.cloud.stream.bindings.pdaiInput.destination: pdaiOutput
spring.cloud.stream.bindings.pdaiInput.content-type: application/json
spring.cloud.stream.bindings.pdaiInput.group: callback
spring.cloud.stream.bindings.pdaiInput.consumer.concurrency: 1

# 代付回调订单通知-发送者
spring.cloud.stream.bindings.pdaiCallBackOutput.destination: pdaiCallBackOutput
spring.cloud.stream.bindings.pdaiCallBackOutput.content-type: application/json
spring.cloud.stream.rabbit.bindings.pdaiCallBackOutput.producer.delayed-exchange: true

# 代付回调订单通知-接收者
spring.cloud.stream.bindings.pdaiCallBackInput.destination: pdaiCallBackOutput
spring.cloud.stream.bindings.pdaiCallBackInput.content-type: application/json
spring.cloud.stream.bindings.pdaiCallBackInput.group: callback
spring.cloud.stream.bindings.pdaiCallBackInput.consumer.concurrency: 1
